---
// 倒计时组件 - 支持相对时间（分钟数）
interface Props {
  minutes?: number // 倒计时分钟数，从当前时间开始计算
  title?: string // 倒计时标题
  endedText?: string // 倒计时结束时显示的文本
}

const {
  minutes = 30, // 默认30分钟倒计时
  title = '特別キャンペーン終了まで',
  endedText = 'キャンペーン終了',
} = Astro.props

// 计算目标时间（当前时间 + 分钟数）
const targetTime = new Date(Date.now() + minutes * 60 * 1000).toISOString();
---

<div class="countdown-container">
  {title && (
    <h3 class="countdown-title">{title}</h3>
  )}

  <div class="countdown-wrapper" data-target={targetTime} data-ended-text={endedText}>
    <div class="countdown-item">
      <div class="countdown-number" id="days">00</div>
      <div class="countdown-label">日</div>
    </div>

    <div class="countdown-separator">:</div>

    <div class="countdown-item">
      <div class="countdown-number" id="hours">00</div>
      <div class="countdown-label">時間</div>
    </div>

    <div class="countdown-separator">:</div>

    <div class="countdown-item">
      <div class="countdown-number" id="minutes">00</div>
      <div class="countdown-label">分</div>
    </div>

    <div class="countdown-separator">:</div>

    <div class="countdown-item">
      <div class="countdown-number" id="seconds">00</div>
      <div class="countdown-label">秒</div>
    </div>
  </div>

  <div class="countdown-ended hidden">
    <span class="ended-text"></span>
  </div>
</div>

<style>
  .countdown-container {
    text-align: center;
    padding: 1.5rem;
    background: linear-gradient(135deg, #06c755 0%, #05b04d 100%);
    border-radius: 1rem;
    box-shadow: 0 8px 32px rgba(6, 199, 85, 0.3);
    margin: 1rem 0;
    width: 100%;
  }

  .countdown-title {
    color: white;
    font-size: 1.25rem;
    font-weight: 700;
    margin-bottom: 1rem;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  .countdown-wrapper {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .countdown-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    background: rgba(255, 255, 255, 0.15);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 0.75rem;
    padding: 0.75rem 1rem;
    min-width: 4rem;
    animation: pulse-glow 2s ease-in-out infinite;
  }

  .countdown-number {
    font-size: 2rem;
    font-weight: 900;
    color: white;
    line-height: 1;
    text-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    font-feature-settings: "tnum";
    transition: all 0.3s ease;
  }

  .countdown-label {
    font-size: 0.75rem;
    color: rgba(255, 255, 255, 0.9);
    font-weight: 600;
    margin-top: 0.25rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .countdown-separator {
    font-size: 1.5rem;
    font-weight: 900;
    color: white;
    opacity: 0.8;
    animation: blink 1s ease-in-out infinite;
  }

  .countdown-ended {
    padding: 1rem;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 0.75rem;
    margin-top: 1rem;
  }

  .ended-text {
    font-size: 1.5rem;
    font-weight: 700;
    color: white;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  }

  .hidden {
    display: none;
  }

  /* 动画效果 */
  @keyframes pulse-glow {
    0%, 100% {
      transform: scale(1);
      box-shadow: 0 0 20px rgba(255, 255, 255, 0.2);
    }
    50% {
      transform: scale(1.02);
      box-shadow: 0 0 30px rgba(255, 255, 255, 0.4);
    }
  }

  @keyframes blink {
    0%, 50% {
      opacity: 1;
    }
    51%, 100% {
      opacity: 0.3;
    }
  }

  @keyframes number-flip {
    0% {
      transform: rotateX(0deg);
    }
    50% {
      transform: rotateX(-90deg);
    }
    100% {
      transform: rotateX(0deg);
    }
  }

  .countdown-number.flip {
    animation: number-flip 0.6s ease-in-out;
  }

  /* 响应式设计 */
  @media (max-width: 640px) {
    .countdown-container {
      padding: 1rem;
      margin: 0.5rem 0;
    }

    .countdown-title {
      font-size: 1rem;
      margin-bottom: 0.75rem;
    }

    .countdown-wrapper {
      gap: 0.25rem;
    }

    .countdown-item {
      padding: 0.5rem 0.75rem;
      min-width: 3rem;
    }

    .countdown-number {
      font-size: 1.5rem;
    }

    .countdown-label {
      font-size: 0.625rem;
    }

    .countdown-separator {
      font-size: 1.25rem;
    }
  }

  @media (max-width: 480px) {
    .countdown-wrapper {
      flex-direction: column;
      gap: 0.5rem;
    }

    .countdown-separator {
      display: none;
    }

    .countdown-item {
      flex-direction: row;
      justify-content: space-between;
      width: 100%;
      max-width: 200px;
      margin: 0 auto;
    }

    .countdown-label {
      margin-top: 0;
      margin-left: 0.5rem;
    }
  }
</style>

<script>
class CountdownTimer {
  private targetTime: number
  private endedText: string
  private interval: number | null = null
  private elements: {
    days: HTMLElement | null
    hours: HTMLElement | null
    minutes: HTMLElement | null
    seconds: HTMLElement | null
    wrapper: HTMLElement | null
    ended: HTMLElement | null
  }

  constructor(container: HTMLElement) {
    const targetDate = container.dataset.target || '2025-12-31 23:59:59'
    this.targetTime = new Date(targetDate).getTime()
    this.endedText = container.dataset.endedText || 'キャンペーン終了'

    this.elements = {
      days: container.querySelector('#days'),
      hours: container.querySelector('#hours'),
      minutes: container.querySelector('#minutes'),
      seconds: container.querySelector('#seconds'),
      wrapper: container.querySelector('.countdown-wrapper'),
      ended: container.querySelector('.countdown-ended'),
    }

    this.start()
  }

  private start(): void {
    this.update() // 立即更新一次
    this.interval = window.setInterval(() => this.update(), 1000)
  }

  private update(): void {
    const now = new Date().getTime()
    const distance = this.targetTime - now

    if (distance < 0) {
      this.handleExpiry()
      return
    }

    const days = Math.floor(distance / (1000 * 60 * 60 * 24))
    const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))
    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60))
    const seconds = Math.floor((distance % (1000 * 60)) / 1000)

    this.updateElement(this.elements.days, days)
    this.updateElement(this.elements.hours, hours)
    this.updateElement(this.elements.minutes, minutes)
    this.updateElement(this.elements.seconds, seconds)
  }

  private updateElement(element: HTMLElement | null, value: number): void {
    if (!element)
      return

    const formattedValue = value.toString().padStart(2, '0')

    if (element.textContent !== formattedValue) {
      element.classList.add('flip')
      setTimeout(() => {
        element.textContent = formattedValue
        element.classList.remove('flip')
      }, 300)
    }
  }

  private handleExpiry(): void {
    if (this.interval) {
      clearInterval(this.interval)
      this.interval = null
    }

    if (this.elements.wrapper) {
      this.elements.wrapper.style.display = 'none'
    }

    if (this.elements.ended) {
      const endedTextElement = this.elements.ended.querySelector('.ended-text')
      if (endedTextElement) {
        endedTextElement.textContent = this.endedText
      }
      this.elements.ended.classList.remove('hidden')
    }
  }

  public destroy(): void {
    if (this.interval) {
      clearInterval(this.interval)
      this.interval = null
    }
  }
}

// 初始化倒计时
document.addEventListener('DOMContentLoaded', () => {
  const countdownContainers = document.querySelectorAll('.countdown-wrapper')
  countdownContainers.forEach((container) => {
    const timer = new CountdownTimer(container as HTMLElement)
    // 存储timer实例以便后续可能的清理操作
    ;(container as any)._countdownTimer = timer
  })
})

// 页面卸载时清理定时器
window.addEventListener('beforeunload', () => {
  // 定时器会在页面卸载时自动清理，但这里提供显式清理的机会
})
</script>
