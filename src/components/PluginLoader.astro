---
type PluginName
  = | 'aos'
    | 'gsap'
    | 'animate'
    | 'swiper'
    | 'countup'
    | 'rellax'
    | 'jquery'

export interface PluginConfig {
  css?: string
  js?: string
  loadStrategy?: 'defer' | 'async' | 'blocking' // 添加加载策略配置
  [key: string]: any // 支持其他自定义配置
}

export interface Props {
  plugins?: Record<string, PluginConfig>
}

const { plugins = { } } = Astro.props

// 预定义插件的默认配置
const defaultPluginConfig: Record<
  PluginName,
  { css?: string, js?: string, loadStrategy?: 'defer' | 'async' | 'blocking' }
> = {
  aos: {
    css: '/mjSFqQ/lib/aos.css',
    js: '/mjSFqQ/lib/aos.js',
    loadStrategy: 'defer', // UI库，需要DOM准备好
  },
  gsap: {
    js: '/mjSFqQ/lib/gsap.min.js',
    loadStrategy: 'defer', // 动画库，需要DOM元素
  },
  animate: {
    css: '/mjSFqQ/lib/animate.min.css',
  },
  swiper: {
    css: '/mjSFqQ/lib/swiper-bundle.min.css',
    js: '/mjSFqQ/lib/swiper-bundle.min.js',
    loadStrategy: 'defer', // 组件库，需要DOM结构
  },
  countup: {
    js: '/mjSFqQ/lib/countUp.umd.js',
    loadStrategy: 'defer', // 需要目标元素存在
  },
  rellax: {
    js: '/mjSFqQ/lib/rellax.min.js',
    loadStrategy: 'defer', // 视差滚动，需要DOM准备好
  },
  jquery: {
    js: '/mjSFqQ/lib/jquery.min.js',
    loadStrategy: 'defer', // 基础库，但通常也可以defer
  },
}

// 处理插件配置，合并默认配置和用户配置
const processedPlugins = Object.entries(plugins).map(
  ([pluginName, userConfig]) => {
    // 如果是预定义插件，合并默认配置
    const defaultConfig = defaultPluginConfig[pluginName as PluginName] || {}
    const finalConfig = { ...defaultConfig, ...userConfig }

    return {
      name: pluginName,
      config: finalConfig,
    }
  },
)

// 收集需要的CSS和JS资源
const cssLinks = processedPlugins
  .map(({ config }) => config.css)
  .filter((css): css is string => Boolean(css))

const jsScripts = processedPlugins
  .map(({ config }) => ({
    src: config.js,
    loadStrategy: config.loadStrategy || 'defer', // 默认使用defer
  }))
  .filter(
    (
      script,
    ): script is {
      src: string
      loadStrategy: 'defer' | 'async' | 'blocking'
    } => Boolean(script.src),
  );
---
{cssLinks.map(href => <link rel="stylesheet" href={href} />)}
{
  jsScripts.map(({ src, loadStrategy }) => {
    if (loadStrategy === 'async') {
      return <script src={src} async is:inline />
    }
 else if (loadStrategy === 'blocking') {
      return <script src={src} is:inline />
    }
 else {
      return <script src={src} defer is:inline />
    }
  })
}
